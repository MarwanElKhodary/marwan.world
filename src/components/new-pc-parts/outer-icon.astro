---
import { parse } from 'node-html-parser';

export interface Props {
    innerIcon: string;
    outerIcon: string;
    innerClass?: string;
    outerClass?: string;
    x?: string;
    y?: string;
    width?: string;
    height?: string;
}

function getSVG(
    name: string,
    options?: {
        x?: string;
        y?: string;
        width?: string;
        height?: string;
    }) {
    const filepath = `/src/svg/${name}.svg`;
    const files = import.meta.glob<string>('/src/svg/**/*.svg', {query: '?raw', import: 'default', eager: true});

    if (!(filepath in files)) {
        throw new Error (`${filepath} not found`);
    }

    const root = parse(files[filepath]);
    const svg = root.querySelector('svg');

    if (!svg) {
        throw new Error(`SVG element not found in ${filepath}`);
    }

    if (options?.x !== undefined) svg.setAttribute('x', options.x.toString());
    if (options?.y !== undefined) svg.setAttribute('y', options.y.toString());
    if (options?.width !== undefined) svg.setAttribute('width', options.width.toString());
    if (options?.height !== undefined) svg.setAttribute('height', options.height.toString());

    
    const { attributes, innerHTML } = svg;

    return { attributes, innerHTML };
}

const { innerIcon, outerIcon, innerClass, outerClass, x, y, width, height } = Astro.props as Props;

const { attributes: innerAttributes, innerHTML: innerContent } = getSVG(innerIcon, { x, y, width, height });
const { attributes: outerAttributes, innerHTML: outerContent } = getSVG(outerIcon);

const outerAttributesWithClass = {
    ...outerAttributes,
    class: outerClass || '',
};
const innerAttributesWithClass = {
    ...innerAttributes,
    class: innerClass || '',
};

const combinedAttributes = {
    ...outerAttributesWithClass,
    class: outerAttributesWithClass.class + ' ' + innerAttributesWithClass.class
};


const combinedContent = `${outerContent}${innerContent}`;
---

<svg {...combinedAttributes} set:html={combinedContent}></svg>